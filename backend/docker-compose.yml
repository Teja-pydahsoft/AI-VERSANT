version: '3.8'

services:
  # ========================================
  # MONGODB DATABASE
  # ========================================
  mongodb:
    image: mongo:6.0
    container_name: ai-versant-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-suma_madam}
    volumes:
      - mongodb_data:/data/db
      - ./init_database.py:/docker-entrypoint-initdb.d/init_database.py:ro
    networks:
      - ai-versant-backend-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ========================================
  # BACKEND API
  # ========================================
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai-versant-backend
    restart: unless-stopped
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    environment:
      # Database
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-password}@mongodb:27017/${MONGO_DATABASE:-suma_madam}?authSource=admin
      
      # JWT
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-versant_jwt_secret_key_2024_secure_and_unique}
      
      # AWS S3
      AWS_ACCESS_KEY: ${AWS_ACCESS_KEY}
      AWS_SECRET_KEY: ${AWS_SECRET_KEY}
      AWS_REGION: ${AWS_REGION:-us-east-1}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
      
      # Email Service (Brevo)
      BREVO_API_KEY: ${BREVO_API_KEY}
      BREVO_SENDER_EMAIL: ${BREVO_SENDER_EMAIL}
      BREVO_SENDER_NAME: ${BREVO_SENDER_NAME:-AI-VERSANT}
      
      # SMS Service (BulkSMS)
      BULKSMS_USERNAME: ${BULKSMS_USERNAME}
      BULKSMS_PASSWORD: ${BULKSMS_PASSWORD}
      
      # CORS
      ALLOW_ALL_CORS: ${ALLOW_ALL_CORS:-true}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,http://localhost:5173,https://crt.pydahsoft.in}
      
      # Server
      PORT: 8000
      FLASK_ENV: ${FLASK_ENV:-production}
      
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - ai-versant-backend-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ========================================
  # REDIS CACHE (Optional)
  # ========================================
  redis:
    image: redis:7-alpine
    container_name: ai-versant-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ai-versant-backend-network
    profiles:
      - production
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  ai-versant-backend-network:
    driver: bridge
