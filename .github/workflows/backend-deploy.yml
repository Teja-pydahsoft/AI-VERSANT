name: 🐍 Deploy AI-VERSANT Backend

on:
  push:
    branches: [ main, master, develop ]
    paths: 
      - 'backend/**'
      - '.github/workflows/backend-deploy.yml'
  pull_request:
    branches: [ main, master ]
    paths: 
      - 'backend/**'
  workflow_dispatch: # Allow manual trigger

env:
  PYTHON_VERSION: '3.10'
  BACKEND_PORT: 8000

jobs:
  # ========================================
  # BACKEND TESTS & LINTING
  # ========================================
  test:
    name: 🧪 Backend Tests & Quality Checks
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: 📥 Install Python dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black isort

    - name: 🔍 Lint Python code
      working-directory: ./backend
      run: |
        echo "Running flake8 linting..."
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: 🎨 Format check Python code
      working-directory: ./backend
      run: |
        echo "Checking code formatting with black..."
        black --check .
        echo "Checking import sorting with isort..."
        isort --check-only .

    - name: 🧪 Run Python tests
      working-directory: ./backend
      env:
        MONGODB_URI: mongodb://admin:password@localhost:27017/test_db?authSource=admin
        JWT_SECRET_KEY: test_jwt_secret_key_for_ci
        AWS_ACCESS_KEY: test_key
        AWS_SECRET_KEY: test_secret
        AWS_REGION: us-east-1
        AWS_S3_BUCKET: test-bucket
        ALLOW_ALL_CORS: 'true'
        BREVO_API_KEY: test_brevo_key
        BULKSMS_USERNAME: test_sms_user
        BULKSMS_PASSWORD: test_sms_pass
      run: |
        echo "Running tests with pytest..."
        python -m pytest test_*.py -v --cov=. --cov-report=xml --cov-report=html --tb=short

    - name: 📊 Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  # ========================================
  # BUILD DOCKER IMAGE
  # ========================================
  build:
    name: 🐳 Build Backend Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔐 Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: 🏗️ Build and push Backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/ai-versant-backend:latest
          ${{ secrets.DOCKER_USERNAME }}/ai-versant-backend:${{ github.sha }}
          ${{ secrets.DOCKER_USERNAME }}/ai-versant-backend:${{ github.run_number }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # ========================================
  # DEPLOY TO RENDER.COM
  # ========================================
  deploy-render:
    name: 🌐 Deploy to Render.com
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🚀 Deploy Backend to Render
      uses: johnbeynon/render-deploy-action@v0.0.8
      with:
        service-id: ${{ secrets.RENDER_BACKEND_SERVICE_ID }}
        api-key: ${{ secrets.RENDER_API_KEY }}

    - name: 🔍 Health Check
      run: |
        echo "Waiting for deployment to complete..."
        sleep 60
        echo "Checking backend health..."
        curl -f ${{ secrets.RENDER_BACKEND_URL }}/health || echo "Health check failed, but deployment may still be in progress"

  # ========================================
  # DEPLOY TO AWS EC2
  # ========================================
  deploy-ec2:
    name: ☁️ Deploy to AWS EC2
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔐 Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

    - name: 📦 Create deployment package
      run: |
        echo "Creating deployment package..."
        tar -czf backend-deployment.tar.gz backend/ *.md
        echo "Deployment package created: backend-deployment.tar.gz"

    - name: 🚀 Deploy to EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: ${{ secrets.EC2_PORT || 22 }}
        script: |
          echo "🚀 Starting backend deployment on EC2..."
          
          # Update system
          sudo apt update && sudo apt upgrade -y
          
          # Install Docker if not present
          if ! command -v docker &> /dev/null; then
            echo "Installing Docker..."
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            sudo usermod -aG docker $USER
          fi
          
          # Install Docker Compose if not present
          if ! command -v docker-compose &> /dev/null; then
            echo "Installing Docker Compose..."
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi
          
          # Create app directory
          mkdir -p /home/$USER/ai-versant-backend
          cd /home/$USER/ai-versant-backend
          
          # Stop existing backend container
          docker stop ai-versant-backend || true
          docker rm ai-versant-backend || true
          
          # Pull latest backend image
          echo "Pulling latest backend image..."
          docker pull ${{ secrets.DOCKER_USERNAME }}/ai-versant-backend:latest
          
          # Create environment file
          echo "Creating environment file..."
          cat > .env << EOF
          MONGODB_URI=${{ secrets.MONGODB_URI }}
          JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
          AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}
          AWS_REGION=${{ secrets.AWS_REGION }}
          AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }}
          BREVO_API_KEY=${{ secrets.BREVO_API_KEY }}
          BREVO_SENDER_EMAIL=${{ secrets.BREVO_SENDER_EMAIL }}
          BULKSMS_USERNAME=${{ secrets.BULKSMS_USERNAME }}
          BULKSMS_PASSWORD=${{ secrets.BULKSMS_PASSWORD }}
          ALLOW_ALL_CORS=true
          PORT=8000
          EOF
          
          # Start backend container
          echo "Starting backend container..."
          docker run -d \
            --name ai-versant-backend \
            --restart unless-stopped \
            -p 8000:8000 \
            --env-file .env \
            ${{ secrets.DOCKER_USERNAME }}/ai-versant-backend:latest
          
          # Wait for startup
          echo "Waiting for backend to start..."
          sleep 30
          
          # Health check
          echo "Performing health check..."
          for i in {1..10}; do
            if curl -f http://localhost:8000/health; then
              echo "✅ Backend health check passed!"
              break
            else
              echo "⏳ Health check attempt $i/10 failed, retrying in 10 seconds..."
              sleep 10
            fi
          done
          
          # Show container status
          docker ps | grep ai-versant-backend
          echo "🎉 Backend deployment completed!"

  # ========================================
  # SECURITY SCAN
  # ========================================
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: './backend'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📊 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # ========================================
  # NOTIFICATION
  # ========================================
  notify:
    name: 📢 Send Notifications
    runs-on: ubuntu-latest
    needs: [test, build, deploy-render, deploy-ec2]
    if: always()

    steps:
    - name: 📧 Send success notification
      if: ${{ needs.test.result == 'success' && needs.build.result == 'success' }}
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: '🎉 AI-VERSANT Backend deployment successful!'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: 📧 Send failure notification
      if: ${{ needs.test.result == 'failure' || needs.build.result == 'failure' }}
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: '❌ AI-VERSANT Backend deployment failed!'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
